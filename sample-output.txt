POST /tasks -> createTask
createTask(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const task = yield task_service_1.default.createTask({
                accountId: req.accountId,
                description: req.body.description,
                title: req.body.title,
            });
            const taskJSON = (0, task_serializer_1.serializeTaskAsJSON)(task);
            res.status(http_1.HttpStatusCodes.CREATED).send(taskJSON);
        });
    }

DELETE /tasks/:id -> deleteTask
deleteTask(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            yield task_service_1.default.deleteTask({
                accountId: req.accountId,
                taskId: req.params.id,
            });
            res.status(http_1.HttpStatusCodes.NO_CONTENT).send();
        });
    }

GET /tasks/:id -> getTask
getTask(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const task = yield task_service_1.default.getTaskForAccount({
                accountId: req.accountId,
                taskId: req.params.id,
            });
            const taskJSON = (0, task_serializer_1.serializeTaskAsJSON)(task);
            res.status(http_1.HttpStatusCodes.CREATED).send(taskJSON);
        });
    }

GET /tasks -> getTasks
getTasks(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const tasks = yield task_service_1.default.getTasksForAccount({
                accountId: req.accountId,
            });
            const tasksJSON = tasks.map(task_serializer_1.serializeTaskAsJSON);
            res.status(http_1.HttpStatusCodes.CREATED).send(tasksJSON);
        });
    }

PATCH /tasks/:id -> updateTask
updateTask(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatedTask = yield task_service_1.default.updateTask({
                accountId: req.accountId,
                taskId: req.params.id,
                description: req.body.description,
                title: req.body.title,
            });
            const taskJSON = (0, task_serializer_1.serializeTaskAsJSON)(updatedTask);
            res.status(http_1.HttpStatusCodes.CREATED).send(taskJSON);
        });
    }
